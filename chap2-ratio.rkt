;(load "chap1-3.rkt")
;(2.1)
(define (make-rat a b)
  (let ((g (gcd a b)))
    (cons (if (> 0 (* a b)) (- (abs (/ a g))) (abs (/ a g)))
          (abs (/ b g)))))
(define (numer rat)
  (car rat))
(define (denomi rat)
  (cdr rat))

(define (add-rat a b)
  (make-rat (+ (* (numer a) (denomi b))
               (* (numer b) (denomi a)))
            (* (denomi a) (denomi b))))
(define (sub-rat a b)
  (make-rat (- (* (numer a) (denomi b))
               (* (numer b) (denomi a)))
            (* (denomi a) (denomi b))))
(define (mul-rat a b)
  (make-rat (* (numer a) (numer b))
            (* (denomi a) (denomi b))))
(define (div-rat a b)
  (make-rat (* (numer a) (denomi b))
            (* (denomi a) (numer b))))
(define (equal-rat? a b)
  (let ((ga (make-rat (numer a) (denomi a)))
        (gb (make-rat (numer a) (denomi a))))
    (and (= (numer a) (numer b))
         (= (denomi a) (denomi b)))))

(define (print-rat rat)
  (display (numer rat))
  (display "/")
  (display (denomi rat))
  (newline))

