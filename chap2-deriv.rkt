(load "number.rkt")

;(2.57)
;(2.58)
(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))

(define (split-list delimiter lis)
  (let ((tail-lis (memq delimiter lis)))
    (if tail-lis
        (cons (take lis (- (length lis) (length tail-lis)))
              (cdr tail-lis))
        lis)))
(define (flat-list lis)
  (if (and (pair? lis) (= 1 (length lis)))
      (flat-list (car lis))
      lis))

(define (make-sum a1 a2)
  (cond ((and (number? a1) (= a1 0)) a2)
        ((and (number? a2) (= a2 0)) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list a1 '+ a2))))
(define (sum? x) (and (pair? x) (memq '+ x)))
(define (addend s)
  (if (sum? s) (flat-list (car (split-list '+ s)))
      (error "not sum expression type --addend" s)))
(define (augend s)
  (if (sum? s) (flat-list (cdr (split-list '+ s)))
      (error "not sum expression type --augend" s)))

(define (make-product a1 a2)
  (cond ((and (number? a1) (number? a2)) (* a1 a2))
        ((or (and (number? a1) (= a1 0))
             (and (number? a2) (= a2 0))) 0)
        ((and (number? a1) (= a1 1)) a2)
        ((and (number? a2) (= a2 1)) a1)
        (else (list a1 '* a2))))
(define (product? x) (and (pair? x) (eq? (cadr x) '*)))
(define (multiplier p) (car p))
(define (multiplicand p)
  (if (not (null? (cdddr p)))
      (cddr p)
      (caddr p)))

;(2.56)
(define (make-exponentiation base pow)
  (cond ((and (number? base) (number? pow)) (** base pow))
        ((and (number? pow) (= pow 0)) 1)
        ((and (number? pow) (= pow 1)) base)
        ((and (number? base) (= base 0)) 0)
        ((and (number? base) (= base 1)) 1)
        (else (list '* base pow))))
(define (exponentiation? x) (and (pair? x) (eq? (car x) '**)))
(define (base s) (cadr s))
(define (exponent s) (caddr s))

(define (deriv ex var)
  (define (deriv-sum sum-ex)
    (make-sum (deriv (addend sum-ex) var)
              (deriv (augend sum-ex) var)))
  (define (deriv-pro pro-ex)
    (make-sum (make-product (multiplier pro-ex)
                            (deriv (multiplicand pro-ex) var))
              (make-product (deriv (multiplier pro-ex) var)
                            (multiplicand pro-ex))))
  (define (deriv-exp exp-ex)
    (make-product (make-product (exponent exp-ex)
                                (make-exponentiation (base exp-ex)
                                                     (dec (exponent exp-ex))))
                  (deriv (base exp-ex) var)))
  (cond ((number? ex) 0)
        ((variable? ex) (if (same-variable? ex var) 1 0))
        ((sum? ex) (deriv-sum ex))
        ((product? ex) (deriv-pro ex))
        ((exponentiation? ex) (deriv-exp ex))
        (else (error "unknown expression type --DERIV" ex))))


(define a '(x + (3 * (x + (y + 2)))))
(define b '(x + 3 * (x + y + 2)))
(define c '(3 * x + 4 * y))

