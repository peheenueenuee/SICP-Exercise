(load "number.rkt")

;(2.57)
(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))

(define (make-sum a1 a2)
  (cond ((and (number? a1) (= a1 0)) a2)
        ((and (number? a2) (= a2 0)) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list '+ a1 a2))))
(define (sum? x) (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s))
(define (augend s) (if (not (null? (cdddr s))) (cons '+ (cddr s))
                       (caddr s)))

(define (make-product a1 a2)
  (cond ((and (number? a1) (number? a2)) (* a1 a2))
        ((or (and (number? a1) (= a1 0))
             (and (number? a2) (= a2 0))) 0)
        ((and (number? a1) (= a1 1)) a2)
        ((and (number? a2) (= a2 1)) a1)
        (else (list '* a1 a2))))
(define (product? x) (and (pair? x) (eq? (car x) '*)))
(define (multiplier p) (cadr p))
(define (multiplicand p) (if (not (null? (cdddr p)))
                             (cons '* (cddr p))
                             (caddr p)))

;(2.56)
(define (make-exponentiation base pow)
  (cond ((and (number? base) (number? pow)) (** base pow))
        ((and (number? pow) (= pow 0)) 1)
        ((and (number? pow) (= pow 1)) base)
        ((and (number? base) (= base 0)) 0)
        ((and (number? base) (= base 1)) 1)
        (else (list '* base pow))))
(define (exponentiation? x) (and (pair? x) (eq? (car x) '**)))
(define (base s) (cadr s))
(define (exponent s) (caddr s))

(define (deriv ex var)
  (cond ((number? ex) 0)
        ((variable? ex) (if (same-variable? ex var) 1
                             0))
        ((sum? ex) (make-sum (deriv (addend ex) var)
                              (deriv (augend ex) var)))
        ((product? ex) (make-sum (make-product (multiplier ex)
                                               (deriv (multiplicand ex) var))
                                 (make-product (deriv (multiplier ex) var)
                                               (multiplicand ex))))
        ((exponentiation? ex)
         (make-product (make-product (exponent ex)
                                     (make-exponentiation (base ex)
                                                          (dec (exponent ex))))
                       (deriv (base ex) var)))
        (else (error "unknown expression type --DERIV" ex))))


(define a '(+ x 1))
(define b '(1 2 3))
(define c (lambda (x) (eval (c x))))

