(load "chap1-3.rkt")
;(2.4)
(define (my-cons x y)
  (lambda (m) (m x y)))
(define (my-car z)
  (z (lambda (p q) p)))
(define (my-cdr z)
  (z (lambda (p q) q)))

;(2.5)
(define (pow-cons a b)
  (* (pow 2 a) (pow 3 b)))
(define (pow-car p)
  (define (iter ca n)
    (let ((rem (remainder ca 2)))
      (if (= 0 rem) (iter (/ ca 2) (inc n))
          n)))
  (iter p 0))
(define (pow-cdr p)
  (define (iter cd n)
    (let ((rem (remainder cd 3)))
      (if (= 0 rem) (iter (/ cd 3) (inc n))
          n)))
  (iter p 0))

;(2.6)
(define (succ x) (+ x 1))
(define (numberize num) ((num succ) 0))

(define zero (lambda (f) (lambda (x) x)))
(define (add-1 n) (lambda (f) (lambda (x) (f ((n f) x)))))
(define one (lambda (f) (lambda (x) (f x))))
(define two (lambda (f) (lambda (x) (f (f x)))))

(define (adding m n) 
  (lambda (f) (lambda (x) ((m f) ((n f) x)))))
(define three (adding one two))

(define (multiplying m n) 
  (lambda (f) (lambda (x) ((m (n f)) x))))
