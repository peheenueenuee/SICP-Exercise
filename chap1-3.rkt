#lang racket

(define (id x) x)
(define (square x) (* x x))
(define (cube x) (* x x x))
(define (dec n) (- n 1))
(define (inc n) (+ n 1))

;(1.29)
;(1.30)
(define (sum term a next b)
  (define (iter a result)
	(if (> a b)
		result
		(iter (next a) (+ result (term a)))))
  (iter a 0))
(define (pi-sum a b)
  (define (pi-term x)
	(/ 1.0 (* x (+ x 2))))
  (define (next n)
	(+ n 4))
  (sum pi-term a next b))
(define (integral f a b dx)
  (define (add-dx x)
	(+ x dx))
  (* (sum f (+ a (/ dx 2.0)) add-dx b) dx))

(define (simpson f a b n)
  (define h (/ (- b a) n))
  (define (y k)
	(define y-term (f (+ a (* k h))))
	(cond ((or (= k 0) (= k n)) y-term)
		  ((even? k) (* 2.0 y-term))
		  (else (* 4.0 y-term))))
  (define sum-y (sum y 0 inc n))
  (* sum-y (/ h 3.0)))

;(1.31)
(define (product term a next b)
  (if (> a b) 
	1
	(* (term a) (product term (next a) next b))))
(define (factorial n)
  (product id 1 inc n))
(define (pi-product n)
  (define (pi-term x)
	(define xt (* 2 x))
	(/ (square xt) (square (inc xt))))
  (/ (* 2.0 2.0 n (product pi-term 2.0 inc n)) 9.0))

