(load "number.rkt")

;(2.59)
;(2.60)
(define (element-of-set? x setx)
  (cond ((null? setx) false)
        ((equal? x (car setx)) true)
        (else (element-of-set? x (cdr setx)))))
(define (adjoin-set x setx) (cons x setx))
(define (intersection-set set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
        ((element-of-set? (car set1) set2)
         (cons (car set1) (intersection-set (cdr set1) set2)))
        (else (intersection-set (cdr set1) set2))))
(define (union-set set1 set2) (append set1 set2))
(define (make-set xs) (if (list? xs) xs null))
