(load "number.rkt")

;(2.59)
;(2.61)
;(2.62)
;(2.63)
(define (make-tree entry left right)
  (list entry left right))
(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))

(define (element-of-set? x setx)
  (cond ((null? setx) false)
        ((= x (entry setx)) true)
        ((< x (entry setx)) (element-of-set? x (left-branch setx)))
        (else (element-of-set? x (right-branch setx)))))
(define (adjoin-set x setx)
  (cond ((null? setx) (make-tree x '() '()))
        ((= x (entry setx)) setx)
        ((< x (entry setx))
         (make-tree (entry setx)
                    (adjoin-set x (left-branch setx))
                    (right-branch setx)))
        (else (make-tree (entry setx)
                         (left-branch setx)
                         (adjoin-set x (right-branch setx))))))

(define (intersection-set-list set1 set2)
  (if (or (null? set1) (null? set2)) null
      (let ((x1 (car set1)) (x2 (car set2)))
        (cond ((= x1 x2)
               (cons x1 (intersection-set-list (cdr set1) (cdr set2))))
              ((< x1 x2) (intersection-set-list (cdr set1) set2))
              (else (intersection-set-list (cdr set2) set1))))))
(define (union-set-list set1 set2)
  (cond ((and (null? set1) (null? set2)) '())
        ((null? set1) set2)
        ((null? set2) set1)
        ((= (car set1) (car set2))
         (cons (car set1) (union-set-list (cdr set1) (cdr set2))))
        ((< (car set1) (car set2))
         (cons (car set1) (union-set-list (cdr set1) set2)))
        (else (cons (car set2) (union-set-list (cdr set2) set1)))))

(define (make-set xs)
  (define (iter lis result)
    (if (null? lis) result
        (iter (cdr lis) (adjoin-set (car lis) result))))
  (iter xs null))

(define (quick-sort seq op)
  (let ((mutch-set (filter (lambda (x) (and (not (= (car seq) x))
                                           (op x (car seq))))
                           seq))
        (unmutch-set (filter (lambda (x) (and (not (= (car seq) x))
                                             (not (op x (car seq)))))
                             seq)))
    (cond ((null? seq) seq)
          ((null? (cdr seq)) seq)
          (else (append (quick-sort mutch-set op)
                        (cons (car seq) (quick-sort unmutch-set op)))))))

(define setA (make-set '(1 2 3 4 5 6 7 8)))
(define setB (make-set '(3 7 5 13 11 2)))
(define set216A (make-set '(7 3 9 1 5 11)))
(define set216B (make-set '(3 1 7 5 9 11)))
(define set216C (make-set '(5 3 9 1 7 11)))

(define (tree->list1 tree)
  (if (null? tree) '()
      (append (tree->list1 (left-branch tree))
              (cons (entry tree) (tree->list1 (right-branch tree))))))

(define (tree->list2 tree)
  (define (copy-to-list tr result-list)
    (if (null? tr) result-list
        (copy-to-list (left-branch tr)
                      (cons (entry tr)
                            (copy-to-list (right-branch tr)
                                          result-list)))))
  (copy-to-list tree '()))

;(2.64)
(define (partial-tree elts n)
  (if (= n 0) (cons '() elts)
      (let ((left-size (quotient (dec n) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left-elts (cdr left-result))
                (right-size (- n (inc left-size))))
            (let ((this-entry (car non-left-elts))
                  (right-result (partial-tree (cdr non-left-elts) right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elts (cdr right-result)))
                (cons (make-tree this-entry left-tree right-tree)
                      remaining-elts))))))))
(define (list->tree elements)
  (car (partial-tree elements (length elements))))
;(2.64a)
; partial-treeは指定された数の要素をリストからとり、木を作り、リストにconsして返す。
; 木を作るとき、要素数が0でない枝を作る必要があったら、
; 残りの要素をリストとしてpartial-treeをcallし、carをその枝とする。
; list->treeはぜんたいとして次のように動作する
; 1 リストの先頭から半分を左の枝に入れる。
; 2 次の先頭をエントリーに入れる。
; 3 左の枝とつりあう数の要素を右の枝に入れる。
; 4 枝を作るときは、枝の要素をリストとして1からやる。

;(2.65)
(define (union-set set1 set2)
  (let ((lis1 (tree->list2 set1))
        (lis2 (tree->list2 set2)))
    (list->tree (union-set-list lis1 lis2))))
(define (intersection-set set1 set2)
  (let ((lis1 (tree->list2 set1))
        (lis2 (tree->list2 set2)))
    (list->tree (intersection-set-list lis1 lis2))))
