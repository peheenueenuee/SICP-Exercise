(load "number.rkt")

;(2.59)
;(2.61)
;(2.62)
(define (element-of-set? x setx)
  (cond ((null? setx) false)
        ((= x (car setx)) true)
        ((< x (car setx)) false)
        (else (element-of-set? x (cdr setx)))))
(define (adjoin-set x setx)
  (cond ((null? setx) (list x))
        ((= x (car setx)) setx)
        ((< x (car setx)) (cons x setx))
        (else (cons (car setx) (adjoin-set x (cdr setx))))))
(define (intersection-set set1 set2)
  (if (or (null? set1) (null? set2)) null
      (let ((x1 (car set1)) (x2 (car set2)))
        (cond ((= x1 x2) (cons x1 (intersection-set (cdr set1) (cdr set2))))
              ((< x1 x2) (intersection-set (cdr set1) set2))
              (else (intersection-set (cdr set2) set1))))))
(define (union-set set1 set2)
  (cond ((and (null? set1) (null? set2)) '())
        ((null? set1) set2)
        ((null? set2) set1)
        ((= (car set1) (car set2))
         (cons (car set1) (union-set (cdr set1) (cdr set2))))
        ((< (car set1) (car set2))
         (cons (car set1) (union-set (cdr set1) set2)))
        (else (cons (car set2) (union-set (cdr set2) set1)))))
(define (make-set xs)
  (let ((ordered-list (quick-sort xs <)))
    (union-set (cdr ordered-list) (list (car ordered-list)))))
(define (quick-sort seq op)
  (let ((mutch-set (filter (lambda (x) (and (not (= (car seq) x))
                                           (op x (car seq))))
                           seq))
        (unmutch-set (filter (lambda (x) (and (not (= (car seq) x))
                                             (not (op x (car seq)))))
                             seq)))
    (cond ((null? seq) seq)
          ((null? (cdr seq)) seq)
          (else (append (quick-sort mutch-set op)
                        (cons (car seq) (quick-sort unmutch-set op)))))))

(define setA (make-set '(1 2 3 4 5 6 7 8)))
(define setB (make-set '(3 7 5 13 11 2)))
