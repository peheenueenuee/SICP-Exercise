(define (=< a b) (or (< a b) (= a b)))
(define (=> a b) (or (> a b) (= a b)))

;(2.7)
;problem related Alyssa P. Hacker
(define (make-interval a b) (cons a b))
(define (greater-one a b) (if (< a b) b a))
(define (lesser-one a b) (if (> a b) b a))
(define (upper-bound interval) (greater-one (car interval) (cdr interval)))
(define (lower-bound interval) (lesser-one (car interval) (cdr interval)))

;(2.8)
;problem related Alyssa P. Hacker
;(2.10)
;(2.11)
;problem related Alyssa P. Hacker and Ben Bitdiddle
(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))
(define (sub-interval x y)
  (make-interval (- (lower-bound x) (upper-bound y))
                 (- (upper-bound x) (lower-bound y))))
(define (mul-interval x y)
  (let ((xl (lower-bound x)) (xu (upper-bound x))
        (yl (lower-bound y)) (yu (upper-bound y)))
    (cond ((< 0 xl) (cond ((< 0 yl) (make-interval (* xu yu) (* xl yl)))
                          ((> 0 yu) (make-interval (* xu yl) (* xl yu)))
                          (else (make-interval (* xu yl) (* xu yu)))))
          ((> 0 xu) (cond ((< 0 yl) (make-interval (* xu yl) (* xl yu)))
                          ((> 0 yu) (make-interval (* xu yu) (* xl yl)))
                          (else (make-interval (* xl yl) (* xl yu)))))
          (else (cond ((< 0 yl) (make-interval (* xl yu) (* xu yu)))
                      ((> 0 yu) (make-interval (* xu yl) (* xl yl)))
                      (else (let ((p1 (* xu yu)) (p2 (* xu yl))
                                  (p3 (* xl yu)) (p4 (* xl yl)))
                              (make-interval (max p1 p2 p3 p4)
                                             (min p1 p2 p3 p4)))))))))
(define (div-interval x y)
  (if (and (=< 0 (upper-bound y)) (=> 0 (lower-bound y)))
      (error "divide-by-zero error")
      (mul-interval x (make-interval (/ 1.0 (upper-bound y))
                                     (/ 1.0 (lower-bound y))))))
;(2.9)
;problem related Alyssa P. Hacker
(define (width interval)
  (/ (abs (- (upper-bound interval) (lower-bound interval))) 2.0))

(define R1 (make-interval 2.1 4.9))
(define R2 (make-interval 0.32 1.46))
(define R3 (make-interval (- 1.12) 0.31))
(define R4 (make-interval 3.0 5.0))
(define R5 (make-interval 1.0 2.0))
