(load "chap2-list.rkt")

;(2.37)
(define (dot-product v w)
  (accumulate + 0 (map * v w)))
(define (matrix-*-vector m v)
  (map (lambda (s) (dot-product v s)) m))
(define (transpose m)
  (accumulate-n cons null m))
(define (matrix-*-matrix ma mb)
  (let ((cols (transpose mb))
        (lines ma))
    (map (lambda (line)
           (map (lambda (col)
                  (dot-product line col))
                cols))
           lines)))

(define v1 '(1 2 3))
(define v2 '(4 1 1))
(define m2 '((1 1 5) (6 3 4) (2 9 7)))
